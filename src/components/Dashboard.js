// ‡πÑ‡∏ü‡∏•‡πå: src/components/Dashboard.js
import React, { useState, useEffect } from "react"; // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ß‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  LineChart,
  Line,
  PieChart,
  Pie,
  Cell,
  ResponsiveContainer,
} from "recharts";
import {
  TrendingUp,
  DollarSign,
  Package,
  Users,
  ShoppingCart,
  AlertCircle,
} from "lucide-react";
import { useOrder } from "../context/OrderContext";
import { useStock } from "../context/StockContext";

const Dashboard = () => {
  const { orders } = useOrder(); // orders ‡∏à‡∏≤‡∏Å OrderContext
  const { getProductsWithStock, stock } = useStock(); // stock ‡∏à‡∏≤‡∏Å StockContext ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô dependency ‡πÉ‡∏ô useEffect

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• products ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
  // ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ getProductsWithStock() ‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å render ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠ stock/products ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
  const productsWithStock = getProductsWithStock();

  const [dateRange, setDateRange] = useState("7"); // 7, 30, 90 days

  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
  const calculateStats = () => {
    const today = new Date();
    const daysAgo = new Date(
      today.getTime() - parseInt(dateRange) * 24 * 60 * 60 * 1000
    );

    const recentOrders = orders.filter(
      (order) =>
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö order.orderDate ‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô Date object
        order.orderDate && new Date(order.orderDate) >= daysAgo
    );

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö totalAmount ‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏≥‡∏°‡∏≤‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
    const totalRevenue = recentOrders.reduce(
      (sum, order) =>
        sum + (typeof order.grandTotal === "number" ? order.grandTotal : 0),
      0
    ); // ‡πÉ‡∏ä‡πâ grandTotal ‡πÅ‡∏ó‡∏ô totalAmount
    const totalOrders = recentOrders.length;
    const totalItems = recentOrders.reduce(
      (sum, order) =>
        sum +
        (order.items
          ? order.items.reduce(
              (itemSum, item) => itemSum + (item.quantity || 0),
              0
            )
          : 0),
      0
    );
    const avgOrderValue = totalOrders > 0 ? totalRevenue / totalOrders : 0;

    // ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ
    const productSales = {};
    recentOrders.forEach((order) => {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö order.items ‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡∏ô‡∏•‡∏π‡∏õ
      order.items?.forEach((item) => {
        if (productSales[item.productId]) {
          productSales[item.productId].quantity += item.quantity || 0;
          productSales[item.productId].revenue += item.totalPrice || 0;
        } else {
          productSales[item.productId] = {
            productName: item.productName,
            quantity: item.quantity || 0,
            revenue: item.totalPrice || 0,
          };
        }
      });
    });

    const topProducts = Object.entries(productSales)
      .map(([id, data]) => ({ productId: id, ...data }))
      .sort((a, b) => (b.quantity || 0) - (a.quantity || 0)) // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö quantity
      .slice(0, 5);

    // ‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏ï‡πà‡∏≥
    const lowStockProducts = productsWithStock.filter(
      (product) => (product.totalStock || 0) <= 10
    ); // ‡πÉ‡∏ä‡πâ productsWithStock

    return {
      totalRevenue,
      totalOrders,
      totalItems,
      avgOrderValue,
      topProducts,
      lowStockProducts,
      recentOrders,
    };
  };

  const stats = calculateStats(); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å calculateStats ‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å render

  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏£‡∏≤‡∏ü‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô
  const getDailySalesData = () => {
    const days = parseInt(dateRange);
    const salesData = [];

    for (let i = days - 1; i >= 0; i--) {
      const date = new Date();
      date.setDate(date.getDate() - i);
      const dateStr = date.toISOString().split("T")[0];

      const dayOrders = orders.filter(
        (order) => order.orderDate && order.orderDate.split("T")[0] === dateStr
      );

      const dayRevenue = dayOrders.reduce(
        (sum, order) =>
          sum + (typeof order.grandTotal === "number" ? order.grandTotal : 0),
        0
      ); // ‡πÉ‡∏ä‡πâ grandTotal

      salesData.push({
        date: date.toLocaleDateString("th-TH", {
          month: "short",
          day: "numeric",
        }),
        revenue: dayRevenue,
        orders: dayOrders.length,
      });
    }

    return salesData;
  };

  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏£‡∏≤‡∏ü‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
  const getCategoryData = () => {
    const categoryStats = {};

    productsWithStock.forEach((product) => {
      // ‡πÉ‡∏ä‡πâ productsWithStock
      if (!product || !product.category) return;

      if (categoryStats[product.category]) {
        categoryStats[product.category].count += 1;
        categoryStats[product.category].stock += product.totalStock || 0;
      } else {
        categoryStats[product.category] = {
          name: product.category,
          count: 1,
          stock: product.totalStock || 0,
        };
      }
    });

    return Object.values(categoryStats);
  };

  const COLORS = [
    "#667eea",
    "#764ba2",
    "#f093fb",
    "#f5576c",
    "#4facfe",
    "#43e97b",
  ];

  return (
    <div className="dashboard">
      <div className="dashboard-header">
        <h1>üìä Dashboard ‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô</h1>
        <div className="date-filter">
          <label>‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤:</label>
          <select
            value={dateRange}
            onChange={(e) => setDateRange(e.target.value)}
          >
            <option value="7">7 ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤</option>
            <option value="30">30 ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤</option>
            <option value="90">90 ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤</option>
          </select>
        </div>
      </div>

      {/* ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏´‡∏•‡∏±‡∏Å */}
      <div className="stats-grid">
        <div className="stat-card revenue">
          <div className="stat-icon">
            <DollarSign size={24} />
          </div>
          <div className="stat-content">
            <h3>‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏°</h3>
            <p className="stat-number">
              ‡∏ø
              {typeof stats.totalRevenue === "number"
                ? stats.totalRevenue.toLocaleString()
                : "0"}
            </p>
            <span className="stat-label">‡πÉ‡∏ô {dateRange} ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤</span>
          </div>
        </div>

        <div className="stat-card orders">
          <div className="stat-icon">
            <ShoppingCart size={24} />
          </div>
          <div className="stat-content">
            <h3>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠</h3>
            <p className="stat-number">{stats.totalOrders}</p>
            <span className="stat-label">‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠</span>
          </div>
        </div>

        <div className="stat-card items">
          <div className="stat-icon">
            <Package size={24} />
          </div>
          <div className="stat-content">
            <h3>‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢</h3>
            <p className="stat-number">{stats.totalItems}</p>
            <span className="stat-label">‡∏ä‡∏¥‡πâ‡∏ô</span>
          </div>
        </div>

        <div className="stat-card avg">
          <div className="stat-icon">
            <TrendingUp size={24} />
          </div>
          <div className="stat-content">
            <h3>‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢</h3>
            <p className="stat-number">
              ‡∏ø
              {typeof stats.avgOrderValue === "number"
                ? stats.avgOrderValue.toLocaleString()
                : "0"}
            </p>
            <span className="stat-label">‡∏ï‡πà‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠</span>
          </div>
        </div>
      </div>

      {/* ‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏•‡∏∞‡∏ä‡∏≤‡∏£‡πå‡∏ï */}
      <div className="charts-grid">
        {/* ‡∏Å‡∏£‡∏≤‡∏ü‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô */}
        <div className="chart-card">
          <h3>üìà ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô</h3>
          {getDailySalesData().length > 0 ? (
            <ResponsiveContainer width="100%" height={300}>
              <LineChart data={getDailySalesData()}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="date" />
                <YAxis />
                <Tooltip
                  formatter={(value, name) => [
                    name === "revenue"
                      ? `‡∏ø${(typeof value === "number"
                          ? value
                          : 0
                        ).toLocaleString()}`
                      : typeof value === "number"
                      ? value
                      : 0,
                    name === "revenue" ? "‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢" : "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠",
                  ]}
                />
                <Line
                  type="monotone"
                  dataKey="revenue"
                  stroke="#667eea"
                  strokeWidth={3}
                />
              </LineChart>
            </ResponsiveContainer>
          ) : (
            <div className="no-data">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô</div>
          )}
        </div>

        {/* ‡∏Å‡∏£‡∏≤‡∏ü‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ */}
        <div className="chart-card">
          <h3>üèÜ ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ Top 5</h3>
          {stats.topProducts.length > 0 ? (
            <ResponsiveContainer width="100%" height={300}>
              <BarChart data={stats.topProducts}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis
                  dataKey="productName"
                  angle={-45}
                  textAnchor="end"
                  height={80}
                />
                <YAxis />
                <Tooltip
                  formatter={(value, name) => [
                    typeof value === "number" ? value : 0,
                    name === "quantity" ? "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡∏≤‡∏¢" : "‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢",
                  ]}
                />
                <Bar dataKey="quantity" fill="#667eea" />
              </BarChart>
            </ResponsiveContainer>
          ) : (
            <div className="no-data">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ</div>
          )}
        </div>

        {/* ‡∏Å‡∏£‡∏≤‡∏ü‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ */}
        <div className="chart-card">
          <h3>üìä ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</h3>
          {getCategoryData().length > 0 ? (
            <ResponsiveContainer width="100%" height={300}>
              <PieChart>
                <Pie
                  data={getCategoryData()}
                  cx="50%"
                  cy="50%"
                  innerRadius={60}
                  outerRadius={100}
                  paddingAngle={5}
                  dataKey="count"
                >
                  {getCategoryData().map((entry, index) => (
                    <Cell
                      key={`cell-${index}`}
                      fill={COLORS[index % COLORS.length]}
                    />
                  ))}
                </Pie>
                <Tooltip />
              </PieChart>
            </ResponsiveContainer>
          ) : (
            <div className="no-data">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</div>
          )}
          <div className="pie-legend">
            {getCategoryData().map((entry, index) => (
              <div key={entry.name} className="legend-item">
                <span
                  className="legend-color"
                  style={{ backgroundColor: COLORS[index % COLORS.length] }}
                ></span>
                <span>
                  {entry.name} ({entry.count})
                </span>
              </div>
            ))}
          </div>
        </div>
      </div>

      {/* ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• */}
      <div className="tables-grid">
        {/* ‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏ï‡πà‡∏≥ */}
        <div className="table-card">
          <h3>‚ö†Ô∏è ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏ï‡πà‡∏≥</h3>
          {stats.lowStockProducts.length === 0 ? (
            <div className="no-data">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏ï‡πà‡∏≥</div>
          ) : (
            <div className="table-container">
              <table className="data-table">
                <thead>
                  <tr>
                    <th>‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</th>
                    <th>‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</th>
                    <th>‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠</th>
                    <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
                  </tr>
                </thead>
                <tbody>
                  {stats.lowStockProducts.map((product) => (
                    <tr key={product.productId}>
                      <td>{product.productName}</td>
                      <td>{product.category}</td>
                      <td>
                        <span
                          className={`stock-badge ${
                            product.totalStock <= 5 ? "critical" : "low"
                          }`}
                        >
                          {product.totalStock}
                        </span>
                      </td>
                      <td>
                        <span className="status-badge warning">
                          <AlertCircle size={14} />
                          ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏ï‡πá‡∏≠‡∏Å
                        </span>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </div>

        {/* ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î */}
        <div className="table-card">
          <h3>üõí ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î</h3>
          <div className="table-container">
            <table className="data-table">
              <thead>
                <tr>
                  <th>‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà</th>
                  <th>‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤</th>
                  <th>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</th>
                  <th>‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°</th>
                  <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
                </tr>
              </thead>
              <tbody>
                {stats.recentOrders.slice(0, 10).map((order) => (
                  <tr key={order.orderId}>
                    <td>{order.orderId}</td>
                    <td>
                      {order.customerInfo?.customerName || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"}
                    </td>{" "}
                    {/* ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö customerInfo */}
                    <td>
                      {order.orderDate
                        ? new Date(order.orderDate).toLocaleDateString("th-TH")
                        : "-"}
                    </td>
                    <td>
                      ‡∏ø
                      {(typeof order.totalAmount === "number"
                        ? order.totalAmount
                        : 0
                      ).toLocaleString()}
                    </td>{" "}
                    {/* ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö totalAmount */}
                    <td>
                      <span className={`status-badge ${order.status}`}>
                        {order.status === "pending" && "‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£"}
                        {order.status === "completed" && "‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå"}
                        {order.status === "shipped" && "‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß"}
                        {order.status === "delivered" && "‡∏™‡πà‡∏á‡∏°‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß"}
                        {order.status === "cancelled" && "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß"}{" "}
                        {/* ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ cancelled */}
                      </span>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Dashboard;
