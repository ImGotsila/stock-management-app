// src/components/ProductList.js
import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { Package, Search, RefreshCw, PlusCircle } from 'lucide-react'; // Added PlusCircle icon
import { useStock } from '../context/StockContext';

const ProductList = () => {
  const { getProductsWithStock, resetData } = useStock();
  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ getProductsWithStock ‡πÉ‡∏ô useEffect ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
  const [products, setProducts] = useState([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('');
  const [loading, setLoading] = useState(true);

  // ‡πÉ‡∏ä‡πâ useEffect ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï products ‡πÄ‡∏°‡∏∑‡πà‡∏≠ getProductsWithStock ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á (‡πÄ‡∏ä‡πà‡∏ô ‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï)
  useEffect(() => {
    setLoading(true);
    // Simulate loading time
    setTimeout(() => {
      setProducts(getProductsWithStock());
      setLoading(false);
    }, 300); // ‡∏•‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î
  }, [getProductsWithStock]); // Dependency array: ‡∏à‡∏∞‡∏£‡∏±‡∏ô effect ‡∏ô‡∏µ‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠ getProductsWithStock ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á

  const getStockClass = (stock) => {
    if (stock >= 50) return 'stock-high';
    if (stock >= 20) return 'stock-medium';
    if (stock >= 10) return 'stock-low';
    return 'stock-critical';
  };

  // ‡∏Å‡∏£‡∏≠‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô
  const categories = ['', ...new Set(products.map(p => p.category).filter(Boolean))]; // filter(Boolean) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏≠‡∏á undefined/null

  const filteredProducts = products.filter(product => {
    const matchesSearch = product.productName.toLowerCase().includes(searchTerm.toLowerCase()) ||
                          product.productId.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesCategory = !selectedCategory || product.category === selectedCategory;

    return matchesSearch && matchesCategory;
  });

  const handleRefresh = () => {
    setLoading(true);
    setTimeout(() => {
      setProducts(getProductsWithStock()); // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
      setLoading(false);
    }, 300);
  };

  if (loading) {
    return (
      <div className="loading-container">
        <div className="spinner"></div>
        <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤...</p>
      </div>
    );
  }

  return (
    <div className="container">
      <div className="header">
        <div className="header-content">
          <div className="header-title">
            <Package size={32} />
            <div>
              <h1>üõçÔ∏è ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤</h1>
              <p>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏á‡πà‡∏≤‡∏¢‡∏î‡∏≤‡∏¢</p>
            </div>
          </div>
          <div className="header-actions">
            {/* NEW: Add Product Button */}
            <Link to="/products/new" className="add-product-btn">
              <PlusCircle size={16} />
              ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà
            </Link>
            <button onClick={handleRefresh} className="refresh-btn">
              <RefreshCw size={16} />
              ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä
            </button>
            <button onClick={resetData} className="reset-btn">
              ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            </button>
          </div>
        </div>
      </div>

      <div className="filters">
        <div className="search-box">
          <Search size={20} />
          <input
            type="text"
            placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
        </div>

        <select
          value={selectedCategory}
          onChange={(e) => setSelectedCategory(e.target.value)}
          className="category-filter"
        >
          <option value="">‡∏ó‡∏∏‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</option>
          {categories.slice(1).map(category => (
            <option key={category} value={category}>{category}</option>
          ))}
        </select>
      </div>

      <div className="stats">
        <div className="stat-item">
          <span className="stat-number">{products.length}</span>
          <span className="stat-label">‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</span>
        </div>
        <div className="stat-item">
          <span className="stat-number">
            {products.reduce((sum, p) => sum + (p.totalStock || 0), 0)} {/* ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö totalStock */}
          </span>
          <span className="stat-label">‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏£‡∏ß‡∏°</span>
        </div>
        <div className="stat-item">
          <span className="stat-number">{categories.length - 1}</span>
          <span className="stat-label">‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</span>
        </div>
      </div>

      {filteredProducts.length === 0 ? (
        <div className="empty-state">
          <Package size={64} />
          <h3>‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</h3>
          <p>‡∏•‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏≠‡∏∑‡πà‡∏ô</p>
        </div>
      ) : (
        <div className="products-grid">
          {filteredProducts.map(product => (
            <div key={product.productId} className="product-card">
              <div className="product-image">
                <img
                  src={product.imageUrl}
                  alt={product.productName}
                  onError={(e) => {
                    e.target.style.display = 'none';
                    e.target.nextSibling.style.display = 'flex';
                  }}
                />
                <div className="no-image" style={{display: 'none'}}>
                  üì∑
                </div>
              </div>

              <div className="product-info">
                <div className="product-name">{product.productName}</div>
                <div className="product-id">‡∏£‡∏´‡∏±‡∏™: {product.productId}</div>
                <div className="product-category">{product.category}</div>

                <div className="stock-info">
                  <span className="stock-label">‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠:</span>
                  <span className={`stock-count ${getStockClass(product.totalStock || 0)}`}> {/* ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö totalStock */}
                    {product.totalStock || 0}
                  </span>
                </div>

                <Link
                  to={`/products/${product.productId}`}
                  className="manage-btn"
                >
                  ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ï‡πá‡∏≠‡∏Å
                </Link>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default ProductList